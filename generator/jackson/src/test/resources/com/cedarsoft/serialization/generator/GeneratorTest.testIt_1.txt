package com.cedarsoft.serialization.generator.staxmate.test;

import java.io.IOException;
import java.util.List;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import com.cedarsoft.Version;
import com.cedarsoft.VersionException;
import com.cedarsoft.VersionRange;
import com.cedarsoft.serialization.stax.AbstractStaxMateSerializer;
import org.codehaus.staxmate.out.SMOutputElement;

public class FooSerializer
    extends AbstractJacksonSerializer<Foo>
{

    public final static String PROPERTY_WIDTH = "width";
    public final static String PROPERTY_HEIGHT = "height";
    public final static String PROPERTY_DESCRIPTION = "description";
    public final static String PROPERTY_ANINT = "anInt";
    public final static String PROPERTY_FLOATFIELD = "floatField";
    public final static String PROPERTY_BARS = "bars";
    public final static String PROPERTY_BAR = "bar";

    public FooSerializer(BarSerializer barSerializer) {
        super("http://cedarsoft.com/serialization/generator/staxmate/test/foo", VersionRange.from(1, 0, 0).to(1, 0, 0));
        add(barSerializer).responsibleFor(Bar.class).map(1, 0, 0).toDelegateVersion(1, 0, 0);
        assert getDelegatesMappings().verify();
    }

    @Override
    public void serialize(JsonGenerator serializeTo, Foo object, Version formatVersion)
        throws IOException, JsonProcessingException
    {
        verifyVersionReadable( formatVersion );
        
        //width
        serializeTo.writeNumberField(PROPERTY_WIDTH, object.getWidth());
        //height
        serializeTo.writeNumberField(PROPERTY_HEIGHT, object.getHeight());
        //description
        serializeTo.writeStringField(PROPERTY_DESCRIPTION, object.getDescription());
        //anInt
        serializeTo.writeNumberField(PROPERTY_ANINT, object.getAnInt());
        //floatField
        serializeTo.writeNumberField(PROPERTY_FLOATFIELD, object.getFloatField());
        //bars
        serializeArray(object.getBars(), Bar.class, PROPERTY_BARS, serializeTo, formatVersion);
        //bar
        serializeTo.writeObjectFieldStart(PROPERTY_BAR);
        serialize(object.getBar(), Bar.class, serializeTo, formatVersion);
        serializeTo.writeEndObject();
    }

    @Override
    public Foo deserialize(JsonParser deserializeFrom, Version formatVersion)
        throws VersionException, IOException, JsonProcessingException
    {
        //width
        nextField(deserializeFrom, PROPERTY_WIDTH);
        double width = deserializeFrom.getDoubleValue();
        //height
        nextField(deserializeFrom, PROPERTY_HEIGHT);
        int height = deserializeFrom.getIntValue();
        //description
        nextField(deserializeFrom, PROPERTY_DESCRIPTION);
        String description = deserializeFrom.getText();
        //anInt
        nextField(deserializeFrom, PROPERTY_ANINT);
        Integer anInt = deserializeFrom.getIntValue();
        //floatField
        nextField(deserializeFrom, PROPERTY_FLOATFIELD);
        float floatField = deserializeFrom.getFloatValue();
        //bars
        List<? extends Bar> bars = deserializeArray(Bar.class, PROPERTY_BARS, deserializeFrom, formatVersion);
        //bar
        nextField(deserializeFrom, PROPERTY_BAR);
        Bar bar = deserialize(Bar.class, formatVersion, deserializeFrom);
        //Finally closing element
        nextToken(deserializeFrom, JsonToken.END_OBJECT);
        //Constructing the deserialized object
        Foo object = new Foo(description, width, height, anInt, bars);
        object.setFloatField(floatField);
        object.setBar(bar);
        return object;
    }

}
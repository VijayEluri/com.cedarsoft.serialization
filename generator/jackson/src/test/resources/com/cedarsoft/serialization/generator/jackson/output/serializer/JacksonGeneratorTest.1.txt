-----------------------------------com.cedarsoft.serialization.generator.jackson.test.FooSerializer.java-----------------------------------

package com.cedarsoft.serialization.generator.jackson.test;

import java.io.IOException;
import java.util.List;
import javax.annotation.Nonnull;
import com.cedarsoft.serialization.jackson.AbstractJacksonSerializer;
import com.cedarsoft.serialization.jackson.JacksonParserWrapper;
import com.cedarsoft.version.Version;
import com.cedarsoft.version.VersionException;
import com.cedarsoft.version.VersionRange;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;

public class FooSerializer
    extends AbstractJacksonSerializer<Foo>
{

    @Nonnull
    public final static String PROPERTY_WIDTH = "width";
    @Nonnull
    public final static String PROPERTY_HEIGHT = "height";
    @Nonnull
    public final static String PROPERTY_DESCRIPTION = "description";
    @Nonnull
    public final static String PROPERTY_ANINT = "anInt";
    @Nonnull
    public final static String PROPERTY_FLOATFIELD = "floatField";
    @Nonnull
    public final static String PROPERTY_BARS = "bars";
    @Nonnull
    public final static String PROPERTY_BAR = "bar";

    public FooSerializer(BarSerializer barSerializer) {
        super("foo", VersionRange.from(1, 0, 0).to(1, 0, 0));
        add(barSerializer).responsibleFor(Bar.class).map(1, 0, 0).toDelegateVersion(1, 0, 0);
        assert getDelegatesMappings().verify();
    }

    @Override
    public void serialize(
        @Nonnull
        JsonGenerator serializeTo,
        @Nonnull
        Foo object,
        @Nonnull
        Version formatVersion)
        throws JsonProcessingException, IOException
    {
        verifyVersionWritable(formatVersion);
        //width
        serializeTo.writeNumberField(PROPERTY_WIDTH, object.getWidth());
        //height
        serializeTo.writeNumberField(PROPERTY_HEIGHT, object.getHeight());
        //description
        serializeTo.writeStringField(PROPERTY_DESCRIPTION, object.getDescription());
        //anInt
        serializeTo.writeNumberField(PROPERTY_ANINT, object.getAnInt());
        //floatField
        serializeTo.writeNumberField(PROPERTY_FLOATFIELD, object.getFloatField());
        //bars
        serializeArray(object.getBars(), Bar.class, PROPERTY_BARS, serializeTo, formatVersion);
        //bar
        serialize(object.getBar(), Bar.class, PROPERTY_BAR, serializeTo, formatVersion);
    }

    @Override
    @Nonnull
    public Foo deserialize(
        @Nonnull
        JsonParser deserializeFrom,
        @Nonnull
        Version formatVersion)
        throws VersionException, JsonProcessingException, IOException
    {
        verifyVersionReadable(formatVersion);
        JacksonParserWrapper parser = new JacksonParserWrapper(deserializeFrom);
        //width
        parser.nextFieldValue(PROPERTY_WIDTH);
        double width = deserializeFrom.getDoubleValue();
        //height
        parser.nextFieldValue(PROPERTY_HEIGHT);
        int height = deserializeFrom.getIntValue();
        //description
        parser.nextFieldValue(PROPERTY_DESCRIPTION);
        String description = deserializeFrom.getText();
        //anInt
        parser.nextFieldValue(PROPERTY_ANINT);
        Integer anInt = deserializeFrom.getIntValue();
        //floatField
        parser.nextFieldValue(PROPERTY_FLOATFIELD);
        float floatField = deserializeFrom.getFloatValue();
        //bars
        List<? extends Bar> bars = deserializeArray(Bar.class, PROPERTY_BARS, deserializeFrom, formatVersion);
        //bar
        Bar bar = deserialize(Bar.class, PROPERTY_BAR, formatVersion, deserializeFrom);
        //Finally closing element
        parser.closeObject();
        //Constructing the deserialized object
        Foo object = new Foo(description, width, height, anInt, bars);
        object.setFloatField(floatField);
        object.setBar(bar);
        return object;
    }

}